generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(cuid())
  name       String
  email      String  @unique
  password   String
  role       Role
  department String
  studentId  String?
  employeeId String?
  isActive   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  StudentAppointments   Appointment[]  @relation("StudentAppointments")
  CounselorAppointments Appointment[]  @relation("CounselorAppointments")
  Availability          Availability[]
  SentMessages         Message[]      @relation("SentMessages")
  ReceivedMessages     Message[]      @relation("ReceivedMessages")
  ConversationParticipants ConversationParticipant[]
  StudentNotes         StudentNote[]  @relation("StudentNotes")
  CounselorNotes       StudentNote[]  @relation("CounselorNotes")
  Notifications        Notification[]
  UploadedFiles        SharedFile[]
}

enum Role {
  STUDENT
  COUNSELOR
  CHAIRPERSON
  ADMIN
}

model Appointment {
  id String @id @default(uuid())

  date      DateTime
  startTime String
  endTime   String
  duration  Int
  location  String?
  type      String
  status    AppointmentStatus @default(PENDING)
  notes     String?

  studentId   String?
  counselorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   User? @relation("StudentAppointments", fields: [studentId], references: [id])
  counselor User? @relation("CounselorAppointments", fields: [counselorId], references: [id])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Availability {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  dayOfWeek DayOfWeek
  startTime String
  endTime   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Conversation {
  id           String @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  participants ConversationParticipant[]
  messages     Message[]
  sharedFiles  SharedFile[]
}

model ConversationParticipant {
  id             String @id @default(uuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())
  
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user          User @relation(fields: [userId], references: [id])
  
  @@unique([conversationId, userId])
}

model Message {
  id             String   @id @default(uuid())
  content        String
  senderId       String
  receiverId     String   // <-- Add this
  conversationId String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())

  sender         User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver       User      @relation("ReceivedMessages", fields: [receiverId], references: [id]) // <-- Add this
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}


model SharedFile {
  id             String @id @default(uuid())
  filename       String
  originalName   String
  mimeType       String
  size           Int
  path           String
  conversationId String
  uploadedById   String
  createdAt      DateTime @default(now())
  
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  uploadedBy     User @relation(fields: [uploadedById], references: [id])
}

model StudentNote {
  id          String @id @default(uuid())
  studentId   String
  counselorId String
  title       String
  content     String
  sessionDate DateTime
  isPrivate   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  student     User @relation("StudentNotes", fields: [studentId], references: [id])
  counselor   User @relation("CounselorNotes", fields: [counselorId], references: [id])
}

model Notification {
  id        String @id @default(uuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean @default(false)
  data      Json?
  createdAt DateTime @default(now())
  
  user      User @relation(fields: [userId], references: [id])
}

enum NotificationType {
  APPOINTMENT_BOOKED
  APPOINTMENT_CANCELLED
  APPOINTMENT_RESCHEDULED
  MESSAGE_RECEIVED
  FILE_SHARED
  SYSTEM_NOTIFICATION
}
